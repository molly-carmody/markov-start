1. In this question, you will examine how the k-value/order of the model, the length of the training text, and the number of characters generated affect the runtime for BruteMarkov. To do that, determine how long it takes for each of the following Markov trials to run:

alice.txt, k = 1, 200 characters max: 0.067

alice.txt, k = 1, 400 characters max: 0.073

alice.txt, k = 1, 800 characters max: 0.085

alice.txt, k = 5, 200 characters max: 0.273

alice.txt, k = 5, 400 characters max: 0.271

alice.txt, k = 5, 800 characters max: 0.283

alice.txt, k = 10, 200 characters max: 0.644

alice.txt, k = 10, 400 characters max: 0.629

alice.txt, k = 10, 800 characters max: 0.660

hawthorne.txt, k = 1, 200 characters max: 0.118

hawthorne.txt, k = 1, 400 characters max: 0.105

hawthorne.txt, k = 1, 800 characters max: 0.101




2. Based on these results, what is the relationship between the runtime and the length of the training text, the k-value, and the max characters generated? How long do you think it will take to generate 1600 random characters using an order-5 Markov model when the The Complete Works of William Shakespeare is used as the training text — our online copy of this text contains roughly 5.5 million characters. Justify your answer — don’t test empirically, use reasoning.
-- just for getRnadom
Increasing the max character increases the runtime because as the max character number was increased
for alice.txt, the runtime also increased. Also, increasing the k value increases the runtime. When k=5 for alice.txt,
the runtime was greater than when k=1 for alice.txt. //CHECK FOR LENGTH OF TRAINING TEXT. 
. 

3. Provide timings using your Efficient model for both creating the map and generating 200, 400, 800, and 1600 character random texts with an order-5 Model and alice.txt. Provide some explanation for the timings you observe.
alice.txt, k = 5, 200 characters max:  0.268

alice.txt, k = 5, 400 characters max: 0.295

alice.txt, k = 5, 800 characters max: 0.314

alice.txt, k = 5, 1600 characters max: 0.378
As the number of max character increased, even though the k value is the same, it takes longer for the program to run because it has more characters to handle and sort. Thus, the runtime is greater as the character max increases. 

- for both creating map and generating text
- HAVE to get justification  --> this is bigger than this

4. Provide timings for the EfficientWordMarkov with different hashcode methods. Time the method you are given and compare the results that you achieve with the better hashcode method that you developed.
-- time give (liek hash = 32) adn how that compare to one you made 
The original hashcode method does not differentiate based on order, assigning the same hashchode to string arrays that contain the same words but are in different orders. Thus, this hash code generates numerous collisions wihci must then be accounted for. Howevever, the new hashcode
limits collisions by using a formula to increase the probability of generating a different hashcode, and thus avoid collision. As a result of its fewer collisions than the original, it has a shorter runtime. 

5. Using a k of your choice and clinton-convention.txt as the training text, if we do not set a maximum number of characters generated (you can effectively do this by having maxLetters be a large number, e.g. 1000 times the size of the training text) what is the average number of characters generated by our Markov text generator?
-- you pick teh k, how many characters do you egenratea from the txt.  --> run a bunch of times and get na everage
-- tell what value of k is 


PARTB
hashmap vs. treemap
-- eveyr time you call a treemap, its alling your compare to method
every time you call a hashmap its calling your hashcode method
-- dont have to turn in a graph (good if put in reposiitroy tho)
--this one about WORDGRAM

